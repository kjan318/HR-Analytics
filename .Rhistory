library("readxl")
data <- read_xlsx('raw data/Hands-on+Dataset.xlsx')
View(data)
head(data)
View(data)
str(data)
table(data$status)
View(data)
(170/686)*100
summary(data)
data$status <- as.factor(data$status)
data$no_of_promotions <- as.factor(data$no_of_promotions)
data$risk_of_attrition <- as.factor(data$risk_of_attrition)
data$potential_rating <- as.factor(data$potential_rating)
View(data)
library(summarytools)
dfSummary(data)
library(tidyverse)
data <- read_xlsx(file.choose())
data <- read_xlsx(file.choose())
library(tidyverse)
data <- read_xlsx(file.choose())
library(tidyverse)
data <- read_xlsx("raw data/Hands-on+Dataset.xlsx")
install.packages ("xlsx", dependencies = TRUE)
library(tidyverse)
library(openxlsx)
library(xlsx)
detach("package:xlsx", unload = TRUE)
data <- read.xlsx("raw data/Hands-on+Dataset.xlsx")
View(data)
dim(data)
#see the structure of data
str(data)
as.tibble(data)
as_tibble(data)
tibble_data <- as_tibble(data)
View(tibble_data)
#cover field to factor type
tibble_data$status <- as.factor(tibble_data$status)
#convert to factor, because we want to count the numberof people at every job level in the organization
tibble_data$job_level <- as.factor(tibble_data$job_level)
tibble_data$no_of_promotions <- as.factor(tibble_data$no_of_promotions)
tibble_data$risk_of_attrition <- as.factor(tibble_data$risk_of_attrition)
tibble_data$potential_rating <- as.factor(tibble_data$potential_rating)
summary(data)
str(tibble_data)
summary(tibble_data)
summary(data)
(data)
str(data)
summary(tibble_data)
library(summarytools)
dfSummary(tibble_data)
#get miss value field
colSums(is.na(tibble_data))
tibble_data$var_rating <- as.factor(tibble_data$performance_rating_2018 - tibble_data$performance_rating_2017)
View(tibble_data)
tibble_data$percent_salary <- (tibble_data$salary_2018 - tibble_data$salary_2017)/  tibble_data$salary_2017 * 100
tibble_data$percent_salary
tibble_data$age <- 2021 - tibble_data$year_of_birth
tibble_data$age
dfsummary(tibble_data$percent_salary)
library(summarytools)
dfsummary(tibble_data$percent_salary)
#get full picture of dataset
dfSummary(tibble_data)
dfSummary(tibble_data$percent_salary)
dfSummary(tibble_data$var_rating)
data[ ,c('year_of_birth','salary_2018','salary_2017','performance_rating_2018','performance_rating_2017')] <- list(Null)
data[ ,c('year_of_birth','salary_2018','salary_2017','performance_rating_2018','performance_rating_2017')] <- list(NULL)
View(tibble_data)
tibble_data[ ,c('year_of_birth','salary_2018','salary_2017','performance_rating_2018','performance_rating_2017')] <- list(NULL)
View(data)
tibble_data[ ,c('hire_date','e_code')] <- list(NULL)
View(tibble_data)
library(vcd)
mosaic(~ gendar + status, data = tibble_data, gp= gbar(fill=matrix(c("red","blue"),2,2)))
mosaic(~ gender + status, data = tibble_data, gp= gbar(fill=matrix(c("red","blue"),2,2)))
library(vcd)
mosaic(~ gender + status, data = tibble_data, gp= gbar(fill=matrix(c("red","blue"),2,2)))
mosaic(~ gender + status, data = tibble_data, gp= gpar(fill=matrix(c("red","blue"),2,2)))
tab <- table(tibble_data$status)
prop.table(tab)
tab2 <- table(tibble_data$gender)
prop.table(tab2)
tab2
round(prop.table(tab2,1)* 100, digits = 2)
prop.table(tab2,1)
tab2
prop.table(tab2,1)* 100
tab2 <- table(tibble_data$status, tibble_data$gender)
tab2
prop.table(tab2,1)
round(prop.table(tab2,1)* 100, digits = 2)
round(prop.table(tab2,2)* 100, digits = 2)
prop.table(tab2,2)
prop.table(tab2,1)
round(prop.table(tab2,2)* 100, digits = 2)
mosaic(~ service_agreement + status, data = tibble_data, gp= gpar(fill=matrix(c("red","blue"),2,2)))
View(tibble_data)
tab <- table(tibble_data$status)
prop.table(tab)
tab2 <- table(tibble_data$status, tibble_data$service_agreement)
round(prop.table(tab2,2)* 100, digits = 2)
mosaic(~ job_level + status, data = tibble_data, gp= gpar(fill=matrix(c("red","blue"),4,2)))
mosaic(~ job_level + status, data = tibble_data, gp= gpar(fill=matrix(c("red","blue"),5,2)))
mosaic(~ job_level + status, data = tibble_data, gp= gpar(fill=matrix(c("red","blue"),5,2)))
mosaic(~ job_level + status, data = tibble_data, gp= gpar(fill=matrix(c("red","blue"),2,2)))
mosaic(~ job_level + status, data = tibble_data, gp= gpar(fill=matrix(c("red","blue","green","black","yellow"),5,2)))
tab2 <- table(tibble_data$status, tibble_data$job_level)
round(prop.table(tab2,2)* 100, digits = 2)
round(prop.table(tab2,1)* 100, digits = 2)
round(prop.table(tab2,1)* 100, digits = 2)
round(prop.table(tab2,2)* 100, digits = 2)
mosaic(~ job_level + status + service_agreement, data = tibble_data, gp= gpar(fill=matrix(c("red","blue","green","black","yellow"),5,2)))
mosaic(~ job_level + status + service_agreement, data = tibble_data, gp= gpar(fill=matrix(c("red","blue","green","black","yellow"),5,3)))
mosaic(~ job_level + status , data = tibble_data, gp= gpar(fill=matrix(c("red","blue","green","black","yellow"),5,2)))
mosaic(~ job_level + status , data = tibble_data, gp= gpar(fill=matrix(c("grey30","blue","green","black","yellow"),5,2)))
mosaic(~ job_level + status , data = tibble_data, gp= gpar(fill=matrix(c("grey30","blue40","green","black","yellow"),5,2)))
mosaic(~ job_level + status , data = tibble_data, gp= gpar(fill=matrix(c("grey30","blue40","green","black","yellow"),5,2)))
mosaic(~ job_level + status , data = tibble_data, gp= gpar(fill=matrix(c("grey30","blue00","green","black","yellow"),5,2)))
mosaic(~ job_level + status , data = tibble_data, gp= gpar(fill=matrix(c("grey30","grey40","green","black","yellow"),5,2)))
mosaic(~ job_level + status , data = tibble_data, gp= gpar(fill=matrix(c("grey30","grey40","green02","black","yellow"),5,2)))
mosaic(~ job_level + status , data = tibble_data, gp= gpar(fill=matrix(c("grey30","grey40","grey50","black","yellow"),5,2)))
mosaic(~ job_level + status , data = tibble_data, gp= gpar(fill=matrix(c("grey30","grey40","grey50","grey60","yellow"),5,2)))
mosaic(~ job_level + status , data = tibble_data, gp= gpar(fill=matrix(c("grey30","grey40","grey50","grey60","grey70"),5,2)))
summary(tibble_data)
#get full picture of dataset
dfSummary(tibble_data)
dfSummary(tibble_data$percent_salary)
dfSummary(tibble_data$var_rating)
round(prop.table(tab2,1)* 100, digits = 2)
round(prop.table(tab2,2)* 100, digits = 2)
##compare Var_rating & status ####
mosaic(~ var_rating + status , data = tibble_data, gp= gpar(fill=matrix(c("grey30","grey40","grey50","grey60","grey70"),5,2)))
tab2 <- table(tibble_data$status, tibble_data$var_rating)
round(prop.table(tab2,2)* 100, digits = 2)
View(tibble_data)
View(data)
View(tibble_data)
tab2 <- table(tibble_data$status, tibble_data$no_of_promotions)
round(prop.table(tab2,2)* 100, digits = 2)
##compare risk of attrition & status ####
mosaic(~ risk_of_attrition + status , data = tibble_data, gp= gpar(fill=matrix(c("grey40","grey50","grey60","grey70"),4,2)))
tab2 <- table(tibble_data$status, tibble_data$risk_of_attrition)
round(prop.table(tab2,2)* 100, digits = 2)
round(prop.table(tab2,1)* 100, digits = 2)
round(prop.table(tab2,2)* 100, digits = 2)
##compare risk of attrition & status ####
mosaic(~ potential_rating + status , data = tibble_data, gp= gpar(fill=matrix(c("grey30","grey40","grey50","grey60","grey70"),5,2)))
tab2 <- table(tibble_data$status, tibble_data$potential_rating)
round(prop.table(tab2,1)* 100, digits = 2)
round(prop.table(tab2,2)* 100, digits = 2)
View(tibble_data)
mosaic(~ awards + status, data = tibble_data, gp= gpar(fill=matrix(c("red","blue"),2,2)))
tab2 <- table(tibble_data$status, tibble_data$awards)
round(prop.table(tab2,2)* 100, digits = 2)
round(prop.table(tab2,1)* 100, digits = 2)
mosaic(~ signon + status, data = tibble_data, gp= gpar(fill=matrix(c("red","blue"),2,2)))
tab2 <- table(tibble_data$status, tibble_data$signon)
round(prop.table(tab2,2)* 100, digits = 2)
round(prop.table(tab2,1)* 100, digits = 2)
tab <- table(tibble_data$gender, tibble_data$status)
chisq.test(tab)
tab <- table(tibble_data$service_agreement, tibble_data$status)
chisq.test(tab)
tab <- table(tibble_data$job_level, tibble_data$status)
chisq.test(tab)
tab <- table(tibble_data$no_of_promotions, tibble_data$status)
chisq.test(tab)
tab <- table(tibble_data$risk_of_attrition, tibble_data$status)
chisq.test(tab)
tab <- table(tibble_data$potential_rating, tibble_data$status)
chisq.test(tab)
tab <- table(tibble_data$signon, tibble_data$status)
chisq.test(tab)
tab <- table(tibble_data$var_rating, tibble_data$status)
chisq.test(tab)
library(ggplot2)
p <- ggplot(tibble_data, aes(x=status, y=age)) + geom_violin()
p + geom_violin(trim = FALSE) + geom_violin(draw_quantiles = c(0.25,0.5,0.75))
avg <- by(tibble_data$age, tibble_data$status, mean)
avg
med <- by(tibble_data$age, tibble_data$status, median)
med
mini <- by(tibble_data$age, tibble_data$status, min)
mini
maxi <- by(tibble_data$age, tibble_data$status, max)
maxi
View(tibble_data)
p <- ggplot(tibble_data, aes(x=status, y=age)) + geom_violin()
p + geom_violin(trim = TRUE) + geom_violin(draw_quantiles = c(0.25,0.5,0.75))
View(tibble_data)
p <- ggplot(tibble_data, aes(x=status, y=distance_from_home)) + geom_violin()
# trim = TRUE or FALSE is whether to trim the graphic head / tail
p + geom_violin(trim = TRUE) + geom_violin(draw_quantiles = c(0.25,0.5,0.75))
avg <- by(tibble_data$distance_from_home, tibble_data$status, mean)
avg
med <- by(tibble_data$distance_from_home, tibble_data$status, median)
med
mini <- by(tibble_data$distance_from_home, tibble_data$status, min)
mini
maxi <- by(tibble_data$distance_from_home, tibble_data$status, max)
maxi
avg <- by(tibble_data$distance_from_home, tibble_data$status, mean)
avg
med <- by(tibble_data$distance_from_home, tibble_data$status, median)
med
maxi <- by(tibble_data$distance_from_home, tibble_data$status, max)
maxi
p <- ggplot(tibble_data, aes(x=status, y=manager_sat)) + geom_violin()
# trim = TRUE or FALSE is whether to trim the graphic head / tail
p + geom_violin(trim = TRUE) + geom_violin(draw_quantiles = c(0.25,0.5,0.75))
avg <- by(tibble_data$manager_sat, tibble_data$status, mean)
avg
maxi <- by(tibble_data$manager_sat, tibble_data$status, max)
maxi
p <- ggplot(tibble_data, aes(x=status, y=employee_sat)) + geom_violin()
# trim = TRUE or FALSE is whether to trim the graphic head / tail
p + geom_violin(trim = TRUE) + geom_violin(draw_quantiles = c(0.25,0.5,0.75))
avg <- by(tibble_data$employee_sat, tibble_data$status, mean)
avg
med <- by(tibble_data$employee_sat, tibble_data$status, median)
med
mini <- by(tibble_data$employee_sat, tibble_data$status, min)
mini
maxi <- by(tibble_data$employee_sat, tibble_data$status, max)
maxi
avg <- by(tibble_data$employee_sat, tibble_data$status, mean)
avg
med <- by(tibble_data$employee_sat, tibble_data$status, median)
med
p <- ggplot(tibble_data, aes(x=status, y=bonus)) + geom_violin()
# trim = TRUE or FALSE is whether to trim the graphic head / tail
p + geom_violin(trim = TRUE) + geom_violin(draw_quantiles = c(0.25,0.5,0.75))
avg <- by(tibble_data$bonus, tibble_data$status, mean)
avg
med <- by(tibble_data$bonus, tibble_data$status, median)
med
mini <- by(tibble_data$bonus, tibble_data$status, min)
mini
maxi <- by(tibble_data$bonus, tibble_data$status, max)
maxi
p <- ggplot(tibble_data, aes(x=status, y=no_courses_taken)) + geom_violin()
# trim = TRUE or FALSE is whether to trim the graphic head / tail
p + geom_violin(trim = TRUE) + geom_violin(draw_quantiles = c(0.25,0.5,0.75))
avg <- by(tibble_data$no_courses_taken, tibble_data$status, mean)
avg
med <- by(tibble_data$no_courses_taken, tibble_data$status, median)
med
mini <- by(tibble_data$no_courses_taken, tibble_data$status, min)
mini
maxi <- by(tibble_data$no_courses_taken, tibble_data$status, max)
maxi
avg <- by(tibble_data$no_courses_taken, tibble_data$status, mean)
avg
med <- by(tibble_data$no_courses_taken, tibble_data$status, median)
med
p <- ggplot(tibble_data, aes(x=status, y=time_in_position)) + geom_violin()
# trim = TRUE or FALSE is whether to trim the graphic head / tail
p + geom_violin(trim = TRUE) + geom_violin(draw_quantiles = c(0.25,0.5,0.75))
avg <- by(tibble_data$time_in_position, tibble_data$status, mean)
avg
med <- by(tibble_data$time_in_position, tibble_data$status, median)
med
mini <- by(tibble_data$time_in_position, tibble_data$status, min)
mini
maxi <- by(tibble_data$time_in_position, tibble_data$status, max)
maxi
avg <- by(tibble_data$time_in_position, tibble_data$status, mean)
avg
maxi <- by(tibble_data$time_in_position, tibble_data$status, max)
maxi
p <- ggplot(tibble_data, aes(x=status, y=percent_salary)) + geom_violin()
# trim = TRUE or FALSE is whether to trim the graphic head / tail
p + geom_violin(trim = TRUE) + geom_violin(draw_quantiles = c(0.25,0.5,0.75))
avg <- by(tibble_data$percent_salary, tibble_data$status, mean)
avg
med <- by(tibble_data$percent_salary, tibble_data$status, median)
med
t.test(age ~ status, data=tibble_data)
t.test(distance_from_home ~ status, data=tibble_data)
t.test(manager_sat ~ status, data=tibble_data)
t.test(employee_sat ~ status, data=tibble_data)
t.test(bonus ~ status, data=tibble_data)
t.test(no_courses_taken ~ status, data=tibble_data)
t.test(time_in_position ~ status, data=tibble_data)
t.test(percent_salary ~ status, data=tibble_data)
t.test(manager_changes ~ status, data=tibble_data) #t = 18.569, df = 515, p-value < 2.2e-16 (dependent)
t.test(manager_sat ~ status, data=tibble_data) #t = -3.9852, df = 213.76, p-value = 9.25e-05 (dependent)
tibble_data[ , c('gender','job_level','signon','age','manager_changes','bonus','time_in_position')] <- list(NULL)
names(tibble_data)
#Feature Engineer Part 2 (dummy variable creation)   #####
library(fastDummies)
results_dummy <- dummy_cols(tibble_data, remove_most_frequent_dummy = T)
View(results_dummy)
View(results_dummy)
results_dummy[ , c('status','Service_agreement','no_of_promotions' ,'risk_of_attrition', 'potential_rating','awards')] <- list(NULL)
names(results_dummy)
names(results_dummy)
colnames(results_dummy[26]) <- "var_rating_minus1"
colnames(results_dummy[27]) <- "var_rating_minus3"
names(results_dummy)
colnames(results_dummy[26])
colnames(results_dummy[26]) <- "var_rating_minus1"
names(results_dummy)
colnames(results_dummy)[26] <- "var_rating_minus1"
colnames(results_dummy)[27] <- "var_rating_minus3"
names(results_dummy)  #finding invalid filed name e.g. var_rating_-1
#Data Split   #####
# Random Split & Time Series Split
library(caret)
results_dummy <- results_dummy[sample(nrow(results_dummy)),]   #data shuffling
View(p)
trainIndex <- createDataPartition(results_dummy$status_1, p = 0.7, list = FALSE)
trainIndex
View(trainIndex)
x_train <- results_dummy[trainIndex,]
View(x_train)
x_test <- results_dummy[-trainIndex,]
dim(x_train)
dim(x_test)
#Model Selection & Building - random forest ####
library(randomForest)
model_1 <- randomForest(status_1 ~., data = x_train)
View(model_1)
model_1
x_train$status_1 <- as.factor(x_train$status_1)
x_test$status_1 <- as.factor(x_test$status_1)
model_1 <- randomForest(status_1 ~., data = x_train) #should run classification not regression
model_1
getTree(model_1)
View(x_train)
View(model_1)
View(x_train)
getTree(model_1, 1)
##create a function for measure importance ####
importance_frame <- measure_importance(mode_1)
#Model Selection & Building - random forest ####
library(randomForest)
##create a function for measure importance ####
importance_frame <- measure_importance(mode_1)
##create a function for measure importance ####
importance_frame <- measure_importance(mode_1)
##create a function for measure importance ####
importance_frame <- randomForest::measure_importance(mode_1)
library(randomForestExplainer)
##create a function for measure importance ####
importance_frame <- measure_importance(mode_1)
library(randomForestExplainer)
##create a function for measure importance ####
importance_frame <- measure_importance(mode_1)
##create a function for measure importance ####
importance_frame <- measure_importance(model_1)
importance_frame
varImpPlot(model_1)
